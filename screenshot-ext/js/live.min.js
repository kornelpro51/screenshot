var DEBUGGER_VERSION = "1.0";
var WEBSTORE_URL = "https://chrome.google.com/webstore/";
var blankTab = null;

/************************ Start UI functions ************************/
function toggleCaptureButton() {
    captureTraffic == !0 ? ($("#capture").parent().addClass("active"), $("#capture").children("i").removeClass("icon-ban-circle").addClass("icon-ok-circle")) : ($("#capture").parent().removeClass("active"), $("#capture").children("i").removeClass("icon-ok-circle").addClass("icon-ban-circle")), showInfo(selectedInfo)
}
function saveSettings() {
    settings.cap_MainFrame == !1 && settings.cap_SubFrame == !1 && settings.cap_Stylesheet == !1 && settings.cap_Script == !1 && settings.cap_Image == !1 && settings.cap_Object == !1 && settings.cap_Xmlhttprequest == !1 && settings.cap_other == !1 && (settings.cap_MainFrame = !0, settings.cap_SubFrame = !0, settings.cap_Stylesheet = !0, settings.cap_Script = !0, settings.cap_Image = !0, settings.cap_Object = !0, settings.cap_Xmlhttprequest = !0, settings.cap_other = !0), localStorage.lhhSettings = JSON.stringify(settings)
}
function capture(n) {
    switch (n) {
        case "main_frame":
            return settings.cap_MainFrame;
        case "sub_frame":
            return settings.cap_SubFrame;
        case "stylesheet":
            return settings.cap_Stylesheet;
        case "script":
            return settings.cap_Script;
        case "image":
            return settings.cap_Image;
        case "object":
            return settings.cap_Object;
        case "xmlhttprequest":
            return settings.cap_Xmlhttprequest;
        case "other":
            return settings.cap_other
    }
    return !1
}
function resetAll() {
    selectedInfo = 0, 
    headerInfo = {}, 
    headerInfo.response = [], 
    headerInfo.request = [], 

    captureRequests = {};
    myTabs = {};
	httpRequests = {};
	requestCount = 0;

    $("#result").empty(), 
    $("#responseList > tbody").empty(), 
    $("#previewArea > div").empty().html(defaultText)
}
function resizeWindow() {
    $(".results").css("height", "0px"), $(".preview").css("width", "0px"), $("#mainTable").height($(window).height() - $(".nav-pills").height()), $(".results").css("height", $("#mainTable td").css("height")), $(".preview").css("width", $("#previewArea").css("width")), $(".codeBlock").height($("#previewArea").height()), $(".codeBlock").width($("#previewArea").width())
}

function uiShowRequest(requestId) {
    t = "<tr id='tr_" + requestId + "'>";
    t += '<td class="rId">' + captureRequests[requestId].no + "<\/td>";
    if (/^[\_]\d*[\_]$/.test(requestId)) {
		t += '<td class="rMe">' + "manual" + "<\/td>";
    } else {
    	t += '<td class="rMe">' + requestId + "<\/td>";
    }
    t += '<td class="rSt">' + captureRequests[requestId].status +"<\/td>";
    t += '<td><input type="text" class="inputUrl" value="' + captureRequests[requestId].url + '" /><\/td>';
    t += "<\/tr>";
    requestCount >= 500 && $("#responseList > tbody tr").last().remove();
    $("#responseList > tbody:first").prepend(t);
}
function uiUpdateRequest (requestId) {
	$("#tr_"+requestId).find('.rSt').text(captureRequests[requestId].status);
}
function showDetailInfo (requestId) {
	if (!captureRequests[requestId].tab) {
		$("#previewArea > div").html("");
		return;
	}
	if (!httpRequests[captureRequests[requestId].tab.id]) {
		$("#previewArea > div").html("");
		return;
	}
	var v = httpRequests[captureRequests[requestId].tab.id];
	t = "<h4>"+v.responseCount+"/"+v.requestCount+"</h4>"
	t += "<table>";
	t += "<thead>";
	t += "<th>Method</th>";
	t += "<th>Status</th>";
	t += "<th>URL</th>";
	t += "<th>Start Time</th>";
	t += "<th>End Time</th>";
	t += "</thead>";
	t += "<tbody>";
	for (var idx in v.request ) {
		t += "<tr>";
		t += "<td>" + v.request[idx].method + "</td>";
        if (typeof v.response[idx] != 'undefined') {
            t += "<td>" + v.response[idx].status + "</td>";
        } else {
            t += "<td></td>";
        }
		t += '<td title="'+v.request[idx].url+'""><input type="text" class="inputUrl" value="' +  v.request[idx].url + '" /></td>';
		t += "<td title='"+v.request[idx].timestamp+"'>" + (new Date(parseInt(v.request[idx].timestamp * 1000))).toLocaleTimeString() + "</td>";
        if (typeof v.response[idx] != 'undefined') {
            t += "<td title='"+v.response[idx].timestamp+"'>" + (new Date(parseInt(v.response[idx].timestamp * 1000))).toLocaleTimeString() + "</td>";
        } else {
            t += "<td></td>";
        }
		
		t += "<\/tr>";
	}
	t += "</tbody>";
	t += "</table>";
	$("#previewArea > div").html(t);
}
/************************ End UI functions ************************/


var headerInfo = {}, settings = {}, tabId = "", selectedInfo = 0, captureTraffic = !0, defaultText = "";
var myTabs = {};
var httpRequests = {};
var captureRequests = {};
var socket = null;
var requestCount = 0;
var INITIAL = 'Init', LOADING = 'Loading', DONE = 'Complete';
var isCaptureProcessing = false;
var captureQueue = [];

/************************ Start Socket.io Connection *******************/
socket = io.connect('http://127.0.0.1');
socket.on('init', function() {
    //console.log(" * web socket - init connection");
});

socket.on('docapture', function (data) {
    startCapture(data.url, data.requestId);
    //console.log(" * startCapture - " + data.url);
});
/************************ End Socket.io Connection *******************/

/************************ Start capture Socket.io Logic *******************/

/**
 *   When receive the capture event via socket.io 
 *   This function create new window and attach debugger for request detection.
 *
 * @function startCapture() 
 *   - params
 *       newUrl    : Web page url
 *       requestId : request identifier
 **/

function startCapture(newUrl, requestId) {
    requestCount++;
    var newRequest = {
        no          : requestCount,              //
        requestId   : requestId,                 // request identifier - this is generated by node.js server side.
        url         : newUrl,                    // web page url to be captured.
        status      : INITIAL,                   // processing status enum(INITIAL, LOADING, COMPLETE)
        tab         : null,                      // created tab object for screen capturing
        httpHistory : null                       // http request array
    };
    captureRequests[requestId]= newRequest;

    uiShowRequest(requestId);   
    chrome.windows.create({url:newUrl, focused: false, incognito: false, type: "normal", width: 1500, height: 1000}, function(window) {
        if (window.tabs.length < 1) {
            console.error (" * fatal - can not get tab * ");
        }
        var tab = window.tabs[0];

        // attach debugger to the created tab.

        chrome.debugger.attach({tabId:tab.id}, DEBUGGER_VERSION,
            function() {
                chrome.debugger.sendCommand({tabId:tab.id}, "Network.enable");
            });
        
        tab.requestId = requestId;        // allocate request identifier to the created tab.
        myTabs[tab.id] = tab;             // register the created tab in the array.
        newRequest.tab = tab;             // register the created tab in the request object.
        newRequest.status = LOADING;      // set the request status

        uiUpdateRequest(requestId);
    });
}

/**
 *   Check if the requred tab loading completed.
 *   If loading is completed this function access takeScreenshot() function.
 *
 * @function checkTabLoadingStatus() 
 *   - params
 *       tabId : Tab ID to check the loading status.
 *       extra : This is extra parameter for debugge, check if which 
 **/

function checkTabLoadingStatus(tabId, extra) {
	//console.log(tabId, httpRequests[tabId].requestCount, httpRequests[tabId].responseCount, httpRequests[tabId].timeoutCheck,extra);
	if (!httpRequests[tabId]) {
		//console.log(" return condition 1 ");
		return;
	}
    if (httpRequests[tabId].requestCount != httpRequests[tabId].responseCount || httpRequests[tabId].requestCount != httpRequests[tabId].prevRequestCount) {
        httpRequests[tabId].prevRequestCount = httpRequests[tabId].requestCount;
        httpRequests[tabId].timeoutCheck = 0;
        //console.log(" return condition 2 ");
        return;
    }
    if (!httpRequests[tabId].isDOMLoaded) {
        //console.log(" return condition 3 ");
        return;
    }
    if (!httpRequests[tabId].isSWFLoaded) {
        //console.log(" return condition 3-1 ");
        return;
    }
	httpRequests[tabId].prevRequestCount = httpRequests[tabId].requestCount;
	if (!httpRequests[tabId].timeoutCheck) {
		httpRequests[tabId].timeoutCheck = 0;
	}
	if (httpRequests[tabId].timeoutCheck < 3) {
		httpRequests[tabId].timeoutCheck++;
		setTimeout(function(){
			checkTabLoadingStatus(tabId, "-- repeate --")
		}, 200);
		//console.log(" return condition 4 ");
		return;
	}
	if (!httpRequests[tabId].loadingCompleted) {
		httpRequests[tabId].loadingCompleted = true;
		takeScreenshot(tabId);
	}
}

/**
 *   If page loading completion detected or meet timeout this function is called.
 *
 * @function takeScreenshot() 
 *   - params
 *       tabId : Tab ID to capture.
 **/

function takeScreenshot(tabId) {
	if (!myTabs[tabId]) {
		//console.log("*************** Exceptional Error ****************")
		return;
	}
	if (isCaptureProcessing) { // if other page is in screenshot process.
		captureQueue.push(tabId);
	} else {                   // if no page is in screenshot process.

		isCaptureProcessing = true;
		processScreenshot(tabId);
	}
}

/**
 *   Do a screen capture.
 *   This function create HTML5 canvas and take the tab's screenshot on that canvas.
 *   
 * @function processScreenshot() 
 *   - params
 *       tabId : Tab ID to capture.
 **/

function processScreenshot(tabId) {
	var canvas;
    var scale = 1;
    httpRequests[tabId].screenshot = {}
    
    if (!httpRequests[tabId].screenshot.canvas) {   // create HTML5 canvas
        canvas = document.createElement('canvas');
        canvas.width = myTabs[tabId].width;
        canvas.height = myTabs[tabId].height;
        httpRequests[tabId].screenshot.canvas = canvas;
        httpRequests[tabId].screenshot.ctx = canvas.getContext('2d');
    }

    // take screenshot for the required tab.
    chrome.tabs.captureVisibleTab(myTabs[tabId].windowId, {format: 'png', quality: 100}, function(dataURI) {
        if (dataURI) {
            var image = new Image();
            image.onload = function() {
                httpRequests[tabId].screenshot.ctx.drawImage(image, 0, 0);
                // if captured image loaded successfully.
                CompleteCapture(tabId, function() {
                    if (captureQueue.length > 0) {
                        // process next capture request
                        processScreenshot(captureQueue.shift());
                    } else {
                        // idle status
                        isCaptureProcessing = false;
                    }
                });
            };
            image.src = dataURI;
        }
    });
}
/**
 *   Complete the screen capture progress.
 *   
 * @function CompleteCapture() 
 *   - params
 *       tabId    : Tab ID to capture.
 *       callback : callback function
 **/

function CompleteCapture(tabId, callback) {
	captureRequests[myTabs[tabId].requestId].status = DONE;
	uiUpdateRequest(myTabs[tabId].requestId);

	if (/^[\_]\d*[\_]$/.test(myTabs[tabId].requestId)) { // This request is created by mannually.
		openPage(tabId, callback);

	} else {                                             // The node.js server sent this request.
		
        var dataURI = httpRequests[tabId].screenshot.canvas.toDataURL();
		socket.emit('captureresult', {url: myTabs[tabId].url, data: dataURI, requestId: myTabs[tabId].requestId});

        //callback();
		chrome.tabs.remove(tabId, function(){
			callback();
		});
	}
}
/**
 *   If the request created by manually open a new tab and display the taken image.
 *   
 * @function openPage() 
 *   - params
 *       tabId    : Tab ID to capture.
 *       callback : callback function
 **/

function openPage(tabId, callback) {
    var dataURI = httpRequests[tabId].screenshot.canvas.toDataURL();
    var byteString = atob(dataURI.split(',')[1]);
    var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
    var ab = new ArrayBuffer(byteString.length);
    var ia = new Uint8Array(ab);
    for (var i = 0; i < byteString.length; i++) {
        ia[i] = byteString.charCodeAt(i);
    }
    var blob = new Blob([ab], {type: mimeString});
    var name = myTabs[tabId].url.split('?')[0].split('#')[0];
    if (name) {
        name = name
            .replace(/^https?:\/\//, '')
            .replace(/[^A-z0-9]+/g, '-')
            .replace(/-+/g, '-')
            .replace(/^[_\-]+/, '')
            .replace(/[_\-]+$/, '');
        name = '-' + name;
    } else {
        name = '';
    }
    name = 'screencapture' + name + '.png';
    function onwriteend() {
        window.open('filesystem:chrome-extension://' + chrome.i18n.getMessage('@@extension_id') + '/temporary/' + name);
        callback();
    }
    function errorHandler() {
        show('uh-oh');
    }
    window.webkitRequestFileSystem(TEMPORARY, 1024*1024, function(fs){
        fs.root.getFile(name, {create:true}, function(fileEntry) {
            fileEntry.createWriter(function(fileWriter) {
                fileWriter.onwriteend = onwriteend;
                fileWriter.write(blob);
            }, errorHandler);
        }, errorHandler);
    }, errorHandler);
}
/**
 *   This function does not implement any operation.
 *   
 * @function openPage() 
 *   - params
 *       url
 **/
function sendBlankImage(tabId) {
    var canvas;
    var scale = 1;
    httpRequests[tabId].screenshot = {}
    httpRequests[tabId].isDOMLoaded = true;
    httpRequests[tabId].isSWFLoaded = true;
    httpRequests[tabId].loadingCompleted = true;
    
    if (!httpRequests[tabId].screenshot.canvas) {   // create HTML5 canvas
        canvas = document.createElement('canvas');
        canvas.width = myTabs[tabId].width;
        canvas.height = myTabs[tabId].height;
        httpRequests[tabId].screenshot.canvas = canvas;
        httpRequests[tabId].screenshot.ctx = canvas.getContext('2d');
    }
    CompleteCapture(tabId, function() { });
}
/**
 *   This function does not implement any operation.
 *   
 * @function openPage() 
 *   - params
 *       url
 **/
function GetRealPath(url) {
    return url;
}

/**
 *   Make the page status completed that loaded time larger than 5s.
 *   
 * @function exceptionHandler() 
 *   - params
 *         none
 **/

var exceptionHandler = setInterval( function () {
    var current = Date.now();
    for (var tabId in httpRequests) {
        // if tab's DOM/SWF completion detected but loadingCompleted is not done even passed more than 5 seconds.

        if (httpRequests[tabId].isDOMLoaded && httpRequests[tabId].isSWFLoaded && !httpRequests[tabId].loadingCompleted) {
            if (httpRequests[tabId].loadedTime + 5000 < current) {
                httpRequests[tabId].loadingCompleted = true;
                takeScreenshot(parseInt(tabId));
            }
        }
    }
}, 1000);

window.onunload = function() {
    clearInterval(exceptionHandler);
};

/************************** event processors *****************************/
$(function() {
    headerInfo.response = [], 
    headerInfo.request = [], 
    defaultText = $("#previewArea").html();
    
    /**
    *  receive http events of the tabs that created by screen capture request.
    *
    **/
    chrome.debugger.onEvent.addListener(function(debuggeeId, message, params) {
        //console.log("* debugger * ", debuggeeId, message, params);
        var tabId = debuggeeId.tabId;
        if (typeof myTabs[tabId] == 'undefined') {
            return;
        }
        if (!httpRequests[tabId]) {
            // if any http Request is not detected on this tab
            httpRequests[tabId] = {request: {}, response: {}, blacklistURLs: [], timeoutCheck: 0, loadingCompleted: false, prevRequestCount: 0, isDOMLoaded: false}
            captureRequests[myTabs[tabId].requestId].httpHistory = httpRequests[tabId];
            if (message == "Network.responseReceived") {
                // first event should be Network.responseReceived or Network.loadingFailed.
                // With with method we can not capture Network.requestWillBeSent, so we are measure the initial request.
                httpRequests[tabId].requestCount = 1;
                httpRequests[tabId].responseCount = 1;
                httpRequests[tabId].request[params.requestId] = {method: "GET", url: params.response.url, timestamp: params.timestamp};
                httpRequests[tabId].response[params.requestId] = {mimeType: params.response.mimeType, status: params.response.status, statusText: params.response.statusText, timestamp: params.timestamp};
            } else if (message == "Network.loadingFailed") {
                // Page does not available and send blank screen to the client.
                httpRequests[tabId].requestCount = 1;
                httpRequests[tabId].responseCount = 1;
                httpRequests[tabId].request[params.requestId] = {method: "GET", url: myTabs[tabId].url, timestamp: params.timestamp};
                httpRequests[tabId].response[params.requestId] = {mimeType: "", status: 404, statusText: "Failed", timestamp: params.timestamp};

                sendBlankImage(tabId);
            } else {
                // Skip this event
                console.error(" * fatal error 1 * ");
            }
        } else {
            if (message == "Network.responseReceived") {
                if (httpRequests[tabId].request[params.requestId]) {
                    httpRequests[tabId].response[params.requestId] = {mimeType: params.response.mimeType, status: params.response.status, statusText: params.response.statusText };
                }
            } else if (message == "Network.loadingFinished") {
                // if loadingFinished event is detected, increase responseCount and check loading completion status.
                if (httpRequests[tabId].request[params.requestId]) {
                    if (typeof httpRequests[tabId].response[params.requestId].timestamp == 'undefined') {
                        httpRequests[tabId].responseCount++;
                    }
                    httpRequests[tabId].response[params.requestId].timestamp = params.timestamp;
                    checkTabLoadingStatus(tabId, "--- from Listener ---");
                }
            } else if (message == "Network.loadingFailed") {
                // if loadingFailed event is detected, increase responseCount and check loading completion status.
                if (httpRequests[tabId].request[params.requestId]) {
                    httpRequests[tabId].response[params.requestId] = {mimeType: '', status: 'canceled', statusText: 'canceled' };
                    if (typeof httpRequests[tabId].response[params.requestId].timestamp == 'undefined') {
                        httpRequests[tabId].responseCount++;
                    }
                    httpRequests[tabId].response[params.requestId].timestamp = params.timestamp;
                    checkTabLoadingStatus(tabId, "--- from Listener ---");
                }
            } else if (message == "Network.requestWillBeSent") {
                // if requestWillBeSent event is detected, increase requestCount.
                if (httpRequests[tabId].isDOMLoaded == true) {
                    // After the DOM loading completed all requests are saved in blacklistURLs.
                    // And if the request url conflict with before does not accept this request.
                    var realPath = GetRealPath(params.request.url);
                    if ( $.inArray(realPath, httpRequests[tabId].blacklistURLs) < 0 ) {
                        if (typeof httpRequests[tabId].request[params.requestId] == 'undefined') {
                            httpRequests[tabId].requestCount++;
                        }
                        httpRequests[tabId].blacklistURLs.push(realPath);
                        httpRequests[tabId].request[params.requestId] = {method: params.request.method, url: params.request.url, timestamp: params.timestamp};
                    }
                } else {
                    // request accepted.
                    if (typeof httpRequests[tabId].request[params.requestId] == 'undefined') {
                        httpRequests[tabId].requestCount++;
                    }
                    httpRequests[tabId].request[params.requestId] = {method: params.request.method, url: params.request.url, timestamp: params.timestamp};
                }
            } else if (message == "Network.dataReceived") {

            } else {
                //console.error(" * error - unknown response * ");
            }
        }
    });

    // Listen DOM load complete event
    chrome.tabs.onUpdated.addListener(function(tabId, changeInfo) {
        // if DOM loading is completed.
	    if (changeInfo.status === 'complete') {
	    	if (myTabs[tabId]) {

                // inject hidescroll.js when DOM load completed.
	    		chrome.tabs.executeScript(tabId, {file: 'js/hidescroll.js'}, function() {
	    			if (httpRequests[tabId]) { 
                        // if request url same with WEBSTORE url skip the swf load check.
                        // because in the webstore page the js indject does not works.
                        if (myTabs[tabId].url.substring(0, 35) == WEBSTORE_URL) {
                            httpRequests[tabId].isSWFLoaded = true;
                        }
                        httpRequests[tabId].isDOMLoaded = true;                       
                        httpRequests[tabId].loadedTime = Date.now();
                        console.error("**** DOM load complete ****");
                        checkTabLoadingStatus(tabId, "---- from DOM complete Listener ------");
	    			} else {
	    				//console.error("**** fatal error ( If 'myTabs' has this tabId, 'httpRequest' also should have this tabId ) ****");
	    			}
				});
	    	}
	    }
	}),
    // Listen tab removed event
    chrome.tabs.onRemoved.addListener(function(tabId, removeInfo) {
        chrome.debugger.detach({tabId:tabId});
    }),
    // Listen SWF load complete event
    chrome.extension.onRequest.addListener(function(request, sender, callback) {
        if (request.msg === 'swfcomplete') {
            // if SWF file detected and swf is successfully loaded.
            if ( httpRequests[sender.tab.id] ) {
                setTimeout(function() {
                    httpRequests[sender.tab.id].isSWFLoaded = true;
                    checkTabLoadingStatus(sender.tab.id, "---- from SWF complete Listener ------");
                }, 8000);
            }
        } else if (request.msg === 'swfnotdetected') {
            // if SWF file does not detected.
            if ( httpRequests[sender.tab.id] ) {
                httpRequests[sender.tab.id].isSWFLoaded = true;
                checkTabLoadingStatus(sender.tab.id, "---- from SWF complete Listener ------");
            }
        } else {
            //console.error('Unknown message received from content script: ' + request.msg);
        }
    }),
    /************************** DOM event listeners *****************************/

    $("#responseList").click(function(n) {
        if (n.toElement.nodeName.toLowerCase() == "td" || n.toElement.nodeName.toLowerCase() == "input" || n.toElement.nodeName.toLowerCase() == "span") {
            var t = $(n.toElement).closest("tr").attr("id");
            $(n.toElement).closest("tr").children("td").children("input").select(), 
            showDetailInfo(t.substring(3));
        }
    }), 

    $("#clearAll").click(function() {
        resetAll()
    }), 

    // DOES NOT USE FOR NOW
    $("#settings").click(function() {
        $("#setMainFrame").prop("checked", settings.cap_MainFrame), 
        $("#setSubFrame").prop("checked", settings.cap_SubFrame), 
        $("#setStylesheet").prop("checked", settings.cap_Stylesheet), 
        $("#setScript").prop("checked", settings.cap_Script), 
        $("#setImage").prop("checked", settings.cap_Image), 
        $("#setObject").prop("checked", settings.cap_Object), 
        $("#setXHR").prop("checked", settings.cap_Xmlhttprequest), 
        $("#setOther").prop("checked", settings.cap_other), 
        settings.view_Raw == !0 ? ($("#viewTypeNice").prop("checked", !1), $("#viewTypeRaw").prop("checked", !0)) : ($("#viewTypeRaw").prop("checked", !1), $("#viewTypeNice").prop("checked", !0)), 
        settings.list_Ascending == !0 ? ($("#listDescending").prop("checked", !1), $("#listAscending").prop("checked", !0)) : ($("#listAscending").prop("checked", !1), $("#listDescending").prop("checked", !0))
    }),
    // DOES NOT USE FOR NOW
    $("#saveSettings").click(function() {
        settings.cap_MainFrame = $("#setMainFrame").prop("checked"), 
        settings.cap_SubFrame = $("#setSubFrame").prop("checked"), 
        settings.cap_Stylesheet = $("#setStylesheet").prop("checked"), 
        settings.cap_Script = $("#setScript").prop("checked"), 
        settings.cap_Image = $("#setImage").prop("checked"), 
        settings.cap_Object = $("#setObject").prop("checked"), 
        settings.cap_Xmlhttprequest = $("#setXHR").prop("checked"), 
        settings.cap_other = $("#setOther").prop("checked"), 
        settings.view_Raw = $("#viewTypeRaw").prop("checked");

        var n = $("#listAscending").prop("checked");
        settings.list_Ascending != n && (settings.list_Ascending = $("#listAscending").prop("checked"), resetAll()), saveSettings(), 
        $("#myModal").modal("hide")
    })

    // Open tab manually.

    $("#btn_openTab").click(function() {
        var time = new Date();
        var id = '_' + time.getTime() + '_';
	    startCapture($("#txt_new_url").val(), id)
	    $("#newTab").modal("hide")
    });
    

    var n = localStorage.lhhSettings;
    n != undefined ? settings = JSON.parse(n) : (settings.cap_MainFrame = !0, settings.cap_SubFrame = !0, settings.cap_Stylesheet = !0, settings.cap_Script = !0, settings.cap_Image = !0, settings.cap_Object = !0, settings.cap_Xmlhttprequest = !0, settings.cap_other = !0, settings.view_Raw = !0, settings.list_Ascending = !1, saveSettings()), chrome.tabs.getCurrent(function(n) {
        chrome.extension.getBackgroundPage().viewTabId = n.id
    }), resizeWindow()

	/*chrome.tabs.create({url:'about:blank'}, function(tab) {
        blankTab = tab;
    });*/
});
$(window).resize(function() {
    resizeWindow()
});